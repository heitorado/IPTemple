#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var db = require('../database');
var debug = require('debug')('iptemple:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/*
* Inicializa o servidor Socket.io e mostra no console quando alguém
* "loga" no chat (acessa a pag)
*/

var io = require('socket.io')(server);



io.on('connection', function(socket)
{
  //ao receptor se conectar, avisa e recupera todas as mensagens do banco.
  socket.on('server connected', function(){
    console.log("servidor se conectou");
    var allMsg = db.getAllMessages();
    io.emit('load complete', allMsg);
  });
  


  //Ao receber o evento chat message, salva no banco de dados e envia para o receptor atraves do emit.
  socket.on('chat message', function(msg){    
    
    db.saveMessage('Anon: ', msg);
    console.log('msg: ' + msg);

    io.emit('chat message', msg);
    
  });

  //Avisa quando usuário se desconectar.
  socket.on('disconnect', function(){
    console.log('usuario desconectou');
  }); 
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
